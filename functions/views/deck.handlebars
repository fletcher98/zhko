<div class="deck-page">
  <h1>Your Review Deck</h1>
  
  <div class="review-stats">
    <div class="stat-count">
      <span id="total-cards">0</span> total cards â€¢
      <span id="due-today">0</span> due today
    </div>
  </div>

  <div id="empty-deck">
    <p>Your deck is empty. Browse words and click "Add" to start building your collection.</p>
  </div>

  <ul id="deck-list" class="word-list">
    <template id="deck-word-template">
      <li>
        <div class="word">
          <a class="characters"></a>
          <div class="definitions"></div>
          <div class="percentile-outer">
            <div class="next-review"></div>
            <div class="review-count"></div>
            <button class="remove-from-deck">Remove</button>
          </div>
        </div>
      </li>
    </template>
  </ul>
</div>

<script type="module">
import { SRSManager } from '/js/srs.js';
import { numericToMarkedPinyin } from '/js/pinyin.js';

// Initialize SRS and render deck
const srs = new SRSManager();
const cards = srs.getAllCards();
const dueCards = srs.getDueCards();

document.querySelector('#total-cards').textContent = cards.length;
document.querySelector('#due-today').textContent = dueCards.length;

if (cards.length === 0) {
  document.querySelector('#empty-deck').style.display = 'block';
} else {
  const deckList = document.querySelector('#deck-list');
  const template = document.querySelector('#deck-word-template');
  
  // Clear existing cards before adding new ones
  deckList.innerHTML = '';

  cards.forEach(card => {
    const fragment = template.content.cloneNode(true);
    const li = fragment.querySelector('li');
    const stats = srs.getCardStats(card.word);
    
    // Create ruby element for pinyin
    const rubyEl = document.createElement('ruby');
    card.word.split('').forEach((character, i) => {
      rubyEl.appendChild(document.createTextNode(character));
      const rtEl = document.createElement('rt');
      rtEl.textContent = numericToMarkedPinyin(card.pinyin[i]);
      rubyEl.appendChild(rtEl);
    });

    fragment.querySelector('.characters').appendChild(rubyEl);
    fragment.querySelector('.characters').href = `/word/${card.word}`;
    fragment.querySelector('.definitions').textContent = card.definition;
    fragment.querySelector('.next-review').textContent = stats.isDue ? 'Due now' : `Due in ${stats.dueIn} days`;
    fragment.querySelector('.review-count').textContent = `Reviews: ${stats.repetitions}`;

    deckList.appendChild(li);
    
    // Add remove button handler after appending li
    li.querySelector('.remove-from-deck').addEventListener('click', () => {
      srs.removeCard(card.word);
      deckList.removeChild(li);
      // Update stats
      const updatedCards = srs.getAllCards();
      const updatedDueCards = srs.getDueCards();
      document.querySelector('#total-cards').textContent = updatedCards.length;
      document.querySelector('#due-today').textContent = updatedDueCards.length;
      if (updatedCards.length === 0) {
        document.querySelector('#empty-deck').style.display = 'block';
      }
    });
  });
}
</script>